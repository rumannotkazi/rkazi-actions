name: Dependency tree (chain)

on:
  workflow_dispatch:
    inputs:
      repositories-file:
        description: 'Path to the file that contains the repositories to check'
        required: true
        default: 'repositories-to-check.txt'

jobs:
  dependency-tree:
    runs-on: ubuntu-latest
    # needs: check-dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read repositories file
        id: read-repositories-file
        run: |
          ls
          echo "repositories=$(cat ${{ inputs.repositories-file }})" >> $GITHUB_ENV

      - name: Dependency Tree
        shell: bash
        run: |
          echo -e "### Dependency Tree \n" >> README.md
          function process_repository() {
            local repo=$1
            local current_chain_info=$2
            local visited_repos=()
            local output=()

            if [ -n "${3-}" ]; then
              visited_repos=("${!3}")
            fi

            if [ -n "${4-}" ]; then
              current_chain=("${!4}")
            fi

            if [[ " ${visited_repos[@]} " == " ${repo} " ]]; then
              # Circular dependency, stop processing
              echo "Circular Dependency detected"
              return
            fi

            visited_repos+=("${repo}")
            current_chain+=("${repo}")

            echo -e "Cloning Repo : $repo"
            git clone "https://github.com/rumannotkazi/$repo.git" "/tmp/$repo"
            cd "/tmp/$repo"
            gemspec_file=$(find . -type f -name '*.gemspec' -print -quit)

            if [[ -z $gemspec_file ]]; then
              echo "No .gemspec file found in $repo"
              return
            fi

            echo -e "Gemspec file found for $repo"

            gemspec_dependencies=($(grep "^ *spec.add_*" "$gemspec_file" | awk '{print $2, $3, $4}'))

            echo -e "GEMSPEC file being checked: $gemspec_file\n"

            local has_dependency=false
            while read -r line; do
              gem=$(echo "$line" | awk '{gsub(/,/,"",$1); print $1}' | sed 's/"//g')
              state=$(echo "$line" | awk '{print $2}' | sed 's/[",]//g')
              version=$(echo "$line" | awk '{print $3}' | sed 's/[",]//g')

              if [[ " ${repositories[*]} " == *" $gem "* ]]; then
                echo -e "Found the gem"
                tags=$(git ls-remote --tags "https://github.com/rumannotkazi/$gem.git")
                latest_tag_gem=$(echo "$tags" | awk '{ print $2 }' | grep -v '{}' | sort -V | tail -n1 | sed 's|refs/tags/||')
                has_dependency=true
                current_chain_info+=("[$state v$version] (latest: $latest_tag_gem)")
                echo "Current Chain: $current_chain and info: $current_chain_info"
                # process the dependency and check for further links
                process_repository "$gem" current_chain_info[@] visited_repos[@] current_chain[@] 
              fi
            done < <(echo "${gemspec_dependencies[@]}")

            if [[ $has_dependency == false ]]; then
              # Generate the output with arrows
              output=""
              for i in "${!current_chain[@]}"; do
                output+="${current_chain[i]} ${current_chain_info[i]}"
                if [ $i -lt $((${#current_chain[@]}-1)) ]; then
                  output+=" >> "
                fi
              done
              echo -e "$output" >> ${{ github.WORKSPACE }}/README.md
              
            fi
            cd ${{ github.WORKSPACE }}
            rm -rf "/tmp/$repo"
          }

          for repository in $repositories; do
            echo "REPOSITORY BEING CHECKED: $repository"
            tags=$(git ls-remote --tags "https://github.com/rumannotkazi/$repository.git")
            latest_tag_gem=$(echo "$tags" | awk '{ print $2 }' | grep -v '{}' | sort -V | tail -n1 | sed 's|refs/tags/||')
            current_chain_info="(latest:$latest_tag_gem)"
            process_repository "$repository" current_chain_info
          done



          if git diff --exit-code README.md; then
            echo "Nothing to commit"
          else
            git config user.email "rkazi@xccelerated.com"
            git config user.name "Ruman Kazi"
            git add README.md
            git commit -m "Updated Dependency tree in README.md file"
            git push origin main
          fi